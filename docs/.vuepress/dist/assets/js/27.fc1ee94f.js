(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{245:function(t,e,_){"use strict";_.r(e);var i=_(0),s=Object(i.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链表","aria-hidden":"true"}},[t._v("#")]),t._v(" "),_("font",{attrs:{color:"#32CD32"}},[t._v("链表")])],1),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),_("p",[t._v("思路：利用快慢双指针，慢指针每走一步，快指针走两步。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),_("p",[t._v("思路：")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),_("p",[t._v("判断链表是否有环")]),t._v(" "),_("p",[t._v("思路：利用快慢双指针，慢指针每走一步，快指针走两步。如果有环，两指针一定会相遇。")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),_("p",[t._v("思路：")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),_("p",[t._v("思路：一定要看清楚，a 和 b 为位置，而不是 val")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),_("p",[t._v("思路一：")]),t._v(" "),t._m(21),t._v(" "),_("p",[t._v("思路二：")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),_("p",[t._v("思路：")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),_("p",[t._v("思路：")]),t._v(" "),t._m(28)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_237-根据-val-来删除链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_237-根据-val-来删除链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 237. 根据 val 来删除链表")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("思路：要考虑删除的是 "),_("code",[t._v("head")]),t._v(" 的情况，以及将 "),_("code",[t._v("prev")]),t._v(" 的概念切换成 "),_("code",[t._v("current")]),t._v(" 和 "),_("code",[t._v("current.next")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"剑指-offer22-删除倒数第-n-个节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer22-删除倒数第-n-个节点","aria-hidden":"true"}},[this._v("#")]),this._v(" 剑指 offer22. 删除倒数第 N 个节点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("思路：利用双指针来进行，两个指针（first, second）。"),e("code",[this._v("first")]),this._v("指针与 second 指针的相差的节点数就是 N，这样当 first 指针到 null 时，此时"),e("code",[this._v("second")]),this._v("的指针的下一个节点即是要删除的节点。如果仅在操作 first 指针时就已经到 null 了，则证明是要删除的节点为头节点（head）,所以返回"),e("code",[this._v("head.next")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_876-找出链表中间点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_876-找出链表中间点","aria-hidden":"true"}},[this._v("#")]),this._v(" 876. 找出链表中间点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当链表节点为奇数时，判断条件为 "),e("code",[this._v("fast.next!== null")])]),this._v(" "),e("li",[this._v("当链表节点为偶数时，判断条件为 "),e("code",[this._v("fast!== null")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_206-反转链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_206-反转链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 206. 反转链表")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("思路：需要三个指针，一个当前指针 "),_("code",[t._v("curr")]),t._v("，一个指向下一个的指针 "),_("code",[t._v("next")]),t._v("，一个 "),_("code",[t._v("curr")]),t._v("前面的指针 prev。本质上我们是要让链表的指向反过来，则形成了反转链表，所以我们需要把 "),_("code",[t._v("curr.next = prev")]),t._v("。但是 "),_("code",[t._v("curr")]),t._v("需要继续往下走，所以 "),_("code",[t._v("next")]),t._v(" 相当于用来存储 "),_("code",[t._v("curr")]),t._v(" 的下一次位置。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_92-从中间规定首位位置反转链表-1-2-3-4-5，给出位置-2，4，则：1-4-3-2-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_92-从中间规定首位位置反转链表-1-2-3-4-5，给出位置-2，4，则：1-4-3-2-5","aria-hidden":"true"}},[this._v("#")]),this._v(" 92. 从中间规定首位位置反转链表 1->2->3->4->5，给出位置 2，4，则：1->4->3->2->5")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("思路：根据首尾位置，将其进行局部反转，在进行链表拼接。拼接时会出现指向的问题，所以在反转前存住两个位置，即上面"),e("code",[this._v("1")]),this._v("与"),e("code",[this._v("2")]),this._v("的位置，反转拼接后，再通过指向的改变完成。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_234-判断是否为回文链表-1-2-2-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_234-判断是否为回文链表-1-2-2-1","aria-hidden":"true"}},[this._v("#")]),this._v(" 234. 判断是否为回文链表 1->2->2->1")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("找出中间点，将链表分二")]),t._v(" "),_("li",[t._v("将后半段的链表反转")]),t._v(" "),_("li",[t._v("将反转后的链表与原链表进行值的比较，若不同则 "),_("code",[t._v("false")]),t._v("，否则继续比较直至完成，为 "),_("code",[t._v("true")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_141-环形链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_141-环形链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 141. 环形链表")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_61-旋转链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_61-旋转链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 61. 旋转链表")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。输入：head = [1,2,3,4,5], k = 2\n输出：[4,5,1,2,3]")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("需要连接链表")]),this._v(" "),e("li",[this._v("找出步数规律，断开链表")]),this._v(" "),e("li",[this._v("步数的规律最为关键")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1669-合并两个链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1669-合并两个链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 1669.合并两个链表")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("给你两个链表  list1 和  list2 ，它们包含的元素分别为  n 个和  m 个。请你将  list1  中第  a  个节点到第  b  个节点删除，并将 list2  接在被删除节点的位置。")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("将 a 的前一个位置占位 A，将 b 的后一个位置进行占位 B")]),t._v(" "),_("li",[t._v("占位后，让 "),_("code",[t._v("A.next = list2")])]),t._v(" "),_("li",[t._v("遍历 list2，让 "),_("code",[t._v("list2的尾结点的 next = B")])]),t._v(" "),_("li",[t._v("返回头节点时，记得在最开始的时候，将 list1 保存，此时在最后再返回即可")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"剑指-offer-52-两个链表的第一个公共节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-52-两个链表的第一个公共节点","aria-hidden":"true"}},[this._v("#")]),this._v(" 剑指 Offer 52. 两个链表的第一个公共节点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("输入两个链表，找出它们的第一个公共节点。 输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出：Reference of the node with value = 8 输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("遍历节点，得出两个链表长度的差值")]),this._v(" "),e("li",[this._v("由长度差，可以将较长的链表位置定于和短链表起始位置一致处")]),this._v(" "),e("li",[this._v("再同时遍历两链表，若节点相同，则抛出节点，否则继续遍历，直至遍历完，若一致无相同节点则抛出 null")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("使用两个指针 node1，node2 分别指向两个链表 headA，headB 的头结点")]),this._v(" "),e("li",[this._v("同时分别逐结点遍历，当 node1 到达链表 headA 的末尾时，重新定位到链表 headB 的头结点；")]),this._v(" "),e("li",[this._v("当 node2 到达链表 headB 的末尾时，重新定位到链表 headA 的头结点。")]),this._v(" "),e("li",[this._v("当它们相遇时，所指向的结点就是第一个公共结点。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_25-k-个一组翻转链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-k-个一组翻转链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 25. K 个一组翻转链表")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("给你一个链表，每  k  个节点一组进行翻转，请你返回翻转后的链表。k  是一个正整数，它的值小于或等于链表的长度。如果节点总数不是  k  的整数倍，那么请将最后剩余的节点保持原有顺序。")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("定义两个节点，一个节点 a 用于存储原头部节点，一个节点为下一待翻转的链表部分头节点 b（作为标识）")]),t._v(" "),_("li",[t._v("将 b 先移动至下一个待翻转的链表部分头部位置，若不足 k 个则返回移动前的头节点")]),t._v(" "),_("li",[t._v("翻转 a 链表部分")]),t._v(" "),_("li",[t._v("设置一个新的头节点 newHead 用于存储翻转后链表的头节点")]),t._v(" "),_("li",[t._v("将节点 a（原先的头部节点，现在已经翻转至尾部） 与待翻转的链表 b 进行连接，但是注意的是不是直接与 b 相连，而是与翻转后的 b 相连")]),t._v(" "),_("li",[t._v("重点思路是 利用递归将每部分都进行翻转，然后进行接连")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-两数相加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-两数相加","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 两数相加")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("给你两个   非空 的链表，表示两个非负的整数。它们每位数字都是按照   逆序   的方式存储的，并且每个节点只能存储   一位   数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0  开头。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("首先想到十进制，因为是逆序，所以由两链表头节点开始进行相加")]),this._v(" "),e("li",[this._v("相对短的链表，则进行补 0 处理")]),this._v(" "),e("li",[this._v("注意进位，和应该是两链表节点的值以及进位一起的和，另外若走完仍有进位，则需补一个节点，val 为进位值")]),this._v(" "),e("li",[this._v("结果需输出链表，所以一开始就要定义一条新链表存储每一次的和，注意生成下一次的节点 new listNode(val)")])])}],!1,null,null,null);e.default=s.exports}}]);