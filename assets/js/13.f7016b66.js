(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{173:function(t,e,s){t.exports=s.p+"assets/img/greedy.08666588.png"},174:function(t,e,s){t.exports=s.p+"assets/img/greedy2.0fe21010.png"},244:function(t,e,s){"use strict";s.r(e);var _=[function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 思路")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("大事化小，小事化了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("大事化小：将大问题，找到与子问题的重叠，把复杂的问题规划成多个小问题")]),this._v(" "),e("li",[this._v("小事化了：从小问题找到决策的核心，确定一种得到最优解的策略")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在生活中，我们经常能应用到这个算法，凑成一百块，肯定先从一百块下面"),e("code",[this._v("面值最大")]),this._v("的开始凑，五十，再二十，再十块，五块......"),e("br"),this._v("\n面值最大，则是这个问题决策的核心。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"具体例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具体例子","aria-hidden":"true"}},[this._v("#")]),this._v(" 具体例子")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("跳一跳"),e("br"),this._v("\n给定一个数组，从数组第一个值开始往后跳，当前的元素值代表可以跳的最大步数，请问最少多少步能到达最后一个元素的位置？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("数组为"),e("code",[this._v("[1, 2, 3, 0, 5]")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("从第一个元素"),s("code",[t._v("1")]),t._v("开始，最多只能跳一步")]),t._v(" "),s("li",[t._v("来到了第二个元素"),s("code",[t._v("2")]),t._v("，最多可以跳两步，跳到第一步发现元素值为"),s("code",[t._v("3")]),t._v("，则说明我在这里可以还最多跳三步，比前面跳两步跳的更远")]),t._v(" "),s("li",[t._v("到达最后的元素位置")]),t._v(" "),s("li",[t._v("答案为"),s("code",[t._v("2")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("数组为"),e("code",[this._v("[3, 2, 1, 0, 5]")]),this._v(" ，则永远到不了最后一个位置。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(173),alt:"贪心算法"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("数组为"),e("code",[this._v("[2, 3, 1, 1, 4]")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(174),alt:"贪心算法2"}})])}],r=s(0),i=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"贪心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("font",{attrs:{color:"#FFD700"}},[t._v("贪心算法")])],1),t._v(" "),s("p",[t._v("贪心算法就是每一步都采用最优的做法。（每一步都选择局部最优解，最终得到全局最优解）")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("例子：比如用最少的钱币数量，凑成一百块。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("分析：既然要用最少的步数到达最后一个元素的位置，则说明我每一步要尽可能跳的远才行")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11)])},_,!1,null,null,null);e.default=i.exports}}]);