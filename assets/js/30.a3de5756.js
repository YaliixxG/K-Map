(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{253:function(a,t,r){"use strict";r.r(t);var _=r(0),v=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"os"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#os","aria-hidden":"true"}},[a._v("#")]),a._v(" OS")]),a._v(" "),r("h3",{attrs:{id:"分布式计算系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式计算系统","aria-hidden":"true"}},[a._v("#")]),a._v(" 分布式计算系统")]),a._v(" "),r("p",[a._v("一个分布式系统包括若干通过网络互联的计算机。这些计算机互相配合以完成一个共同的目标（我们将这个共同的目标称为“项目”）。具体的过程是：将需要进行大量计算的项目数据分割成小块，由多台计算机分别计算，再上传运算结果后统一合并得出数据结论。在分布式系统上运行的计算机程序称为分布式计算程序；分布式编程就是编写上述程序的过程。简单的来说，采用分布式计算的一组计算机组成的系统，叫做分布式计算系统。")]),a._v(" "),r("h3",{attrs:{id:"处理机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#处理机","aria-hidden":"true"}},[a._v("#")]),a._v(" 处理机")]),a._v(" "),r("p",[a._v("处理机包括中央处理器（CPU），主存储器，输入-输出接口（I/O）加接外围设备就构成完整的计算机系统。处理机是处理计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件。")]),a._v(" "),r("h3",{attrs:{id:"并发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并发","aria-hidden":"true"}},[a._v("#")]),a._v(" 并发")]),a._v(" "),r("p",[a._v("在宏观上来讲就是同一段时间内可以同时运行多个程序")]),a._v(" "),r("h3",{attrs:{id:"并行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并行","aria-hidden":"true"}},[a._v("#")]),a._v(" 并行")]),a._v(" "),r("p",[a._v("在同一时刻能运行多个指令")]),a._v(" "),r("h3",{attrs:{id:"进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程","aria-hidden":"true"}},[a._v("#")]),a._v(" 进程")]),a._v(" "),r("p",[a._v("一个正在运行的程序可以看做一个进程，进程拥有独立运行所需要的全部资源，是资源分配的基本单位")]),a._v(" "),r("h4",{attrs:{id:"进程控制块-process-control-block-pcb"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程控制块-process-control-block-pcb","aria-hidden":"true"}},[a._v("#")]),a._v(" 进程控制块 (Process Control Block, PCB)")]),a._v(" "),r("p",[a._v("是操作系统核心中一种数据结构，主要表示进程状态。其作用是使一个在多道程序环境下不能独立运行的程序（含数据），成为一个能独立运行的基本单位或与其它进程并发执行的进程。"),r("br"),a._v("\n描述进程的基本信息和运行状态。创建进程和撤销进程其实都是对PCB进行操作。")]),a._v(" "),r("h4",{attrs:{id:"进程的状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态","aria-hidden":"true"}},[a._v("#")]),a._v(" 进程的状态")]),a._v(" "),r("ul",[r("li",[a._v("就绪状态：当进程已经分配了除cpu以外的所有必要资源时，只要获得处理机便可立即执行")]),a._v(" "),r("li",[a._v("执行状态：当进程已经获得处理机，程序正在处理机上执行时")]),a._v(" "),r("li",[a._v("阻塞状态：正在执行的进程，由于等待某个事件发生而无法执行时，便放弃处理机而处于阻塞状态")])]),a._v(" "),r("h4",{attrs:{id:"进程的状态转换以及导致转换的事件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态转换以及导致转换的事件","aria-hidden":"true"}},[a._v("#")]),a._v(" 进程的状态转换以及导致转换的事件")]),a._v(" "),r("ul",[r("li",[a._v("就绪 ==> 执行：处于就绪状态的进程，当进程调度程序为之分配了处理机后，该进程便由就绪状态转变成执行状态")]),a._v(" "),r("li",[a._v("执行 ==> 就绪：处于执行状态的进程在其执行过程中，因分配给它的一个时间片已用完而不得不让出处理机，于是进程从执行状态转变成就绪状态")]),a._v(" "),r("li",[a._v("执行 ==> 阻塞：正在执行的进程因等待某种事件发生而无法继续执行时，便从执行状态变成阻塞状态")]),a._v(" "),r("li",[a._v("阻塞 ==> 就绪：处于阻塞状态的进程，若其等待的事件已经发生，于是进程由阻塞状态转变为就绪状态")])]),a._v(" "),r("blockquote",[r("p",[a._v("时间片（timeslice）又称为“量子（quantum）”或“处理器片（processor slice）”是分时操作系统分配给每个正在运行的进程微观上的一段CPU时间（在抢占内核中是：从进程开始运行直到被抢占的时间）")])]),a._v(" "),r("h4",{attrs:{id:"进程间通信（ipc-interprocess-communication）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信（ipc-interprocess-communication）","aria-hidden":"true"}},[a._v("#")]),a._v(" 进程间通信（IPC,InterProcess Communication）")]),a._v(" "),r("blockquote",[r("p",[a._v("指在不同进程之间传播或交换信息。")])]),a._v(" "),r("ol",[r("li",[a._v("管道通信（管道是指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件（pipe文件））\n管道机制必须有满足一下几点，才能进行通信：\n"),r("ul",[r("li",[a._v("互斥：当一个进程正在对pipe进行读/写操作时，其他进程必须等待")]),a._v(" "),r("li",[a._v("同步：当一个进程将一定数量的数据进行写入，然后就去睡眠等待，直到读进程将数据取走，再去唤醒。读进程与之类似。")]),a._v(" "),r("li",[a._v("确定对方的进程是否存在")])])]),a._v(" "),r("li",[a._v("共享存储器系统：相互通信的进程共享某些数据结构或共享存储区来交换或传递数据")]),a._v(" "),r("li",[a._v("消息传递系统：\n"),r("ul",[r("li",[a._v("直接通信：发送进程利用OS所提供的发送原语直接把消息发给目标进程")]),a._v(" "),r("li",[a._v("间接通信：发送和接收进程都通过共享实体（邮箱）的方式进行消息的发送和接收")])])]),a._v(" "),r("li",[a._v("套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。")])]),a._v(" "),r("h3",{attrs:{id:"线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程","aria-hidden":"true"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),r("p",[a._v("程序中独立运行的代码段。是调度运行的基本单位")]),a._v(" "),r("blockquote",[r("p",[a._v("一个进程至少由一个线程组成，也可以是多个线程。进程负责调度和分配，而线程是程序真正的执行单元，负责代码的执行")])]),a._v(" "),r("h3",{attrs:{id:"共享"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#共享","aria-hidden":"true"}},[a._v("#")]),a._v(" 共享")]),a._v(" "),r("p",[a._v("系统中的资源可以被多个并发进程共同使用")]),a._v(" "),r("h3",{attrs:{id:"死锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#死锁","aria-hidden":"true"}},[a._v("#")]),a._v(" 死锁")]),a._v(" "),r("p",[a._v("多线程以及多进程改善了系统资源的利用率并提高了系统 的处理能力。然而，并发执行也带来了新的问题——死锁。")]),a._v(" "),r("blockquote",[r("p",[a._v("死锁是指两个或两个以上的进程（线程）在运行过程中因争夺资源而造成的一种僵局（Deadly-Embrace) ) ，若无外力作用，这些进程（线程）都将无法向前推进。")])]),a._v(" "),r("h4",{attrs:{id:"产生死锁的原因"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#产生死锁的原因","aria-hidden":"true"}},[a._v("#")]),a._v(" 产生死锁的原因")]),a._v(" "),r("ul",[r("li",[a._v("竞争不可抢占资源引起死锁")]),a._v(" "),r("li",[a._v("竞争可消耗资源引起死锁")]),a._v(" "),r("li",[a._v("进程推进顺序不当引起死锁"),r("br"),a._v("\n如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。")])]),a._v(" "),r("h4",{attrs:{id:"产生死锁的四个必要条件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#产生死锁的四个必要条件","aria-hidden":"true"}},[a._v("#")]),a._v(" 产生死锁的四个必要条件")]),a._v(" "),r("ul",[r("li",[a._v("互斥条件：一个资源每次只能被一个进程使用")]),a._v(" "),r("li",[a._v("请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放")]),a._v(" "),r("li",[a._v("不可剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺")]),a._v(" "),r("li",[a._v("循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系"),r("br"),a._v("\n这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足没就不会发生死锁")])]),a._v(" "),r("h4",{attrs:{id:"死锁的解除和预防"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#死锁的解除和预防","aria-hidden":"true"}},[a._v("#")]),a._v(" 死锁的解除和预防")]),a._v(" "),r("p",[a._v("在系统设计，进程调度等方面注意不让这四个必要条件成立，确定资源的合理分配算法，避免进程永久占据系统资源。防止进程在处于等待状态的情况下占用资源，合理规划资源分配")]),a._v(" "),r("h3",{attrs:{id:"用户态和核心态的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户态和核心态的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户态和核心态的区别")]),a._v(" "),r("p",[a._v("cpu分为四个运行级别ring0~ring3")]),a._v(" "),r("blockquote",[r("p",[a._v("用户态：当程序运行在3级 特权级上时，就可以称之为运行在用户态，因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态\n核心态：当程序运 行在0级特权级上时，就可以称之为运行在内核态")])]),a._v(" "),r("p",[a._v("当我们执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系 统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态")]),a._v(" "),r("h4",{attrs:{id:"用户态到核心态的转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户态到核心态的转换","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户态到核心态的转换")]),a._v(" "),r("ul",[r("li",[a._v("系统调用：这是用户态进程主动要求切换到内核态的一种方式。用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作")]),a._v(" "),r("li",[a._v("异常：当cpu在执行运行在用户态下的程序时，发生了一些没有预知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关进程中，也就是切换到了内核态，如缺页异常")]),a._v(" "),r("li",[a._v("外围设备的中断：当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会 暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到 内核态的切换")])]),a._v(" "),r("p",[a._v("以上三种转换，只有系统调用是用户进程主动发起的，异常和外围设备中断则是被动的。系统调用实际上最终是中断机制实现的，而异常和中断的处理机制基本一致。")]),a._v(" "),r("h3",{attrs:{id:"用户栈和内核栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户栈和内核栈","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户栈和内核栈")]),a._v(" "),r("p",[a._v("内核创建进程，也会创建进程控制块，并且也会创建进程自己的堆栈"),r("br"),a._v("\n一个进程由两个堆栈：用户栈和内核栈"),r("br"),a._v("\n用户堆栈的空间指向用户地址空间，内核堆栈的空间指向内核地址空间"),r("br"),a._v("\nCPU堆栈寄存指针器，它会在进程的运行状态，来指向对应的栈。如果进程运行在用户态，则指针指向用户堆栈地址，使用的是用户栈，如果进程运行在核心态，则指针指向内核堆栈地址，使用的是内核栈")])])}],!1,null,null,null);t.default=v.exports}}]);